@typeparam TStateManager where TStateManager : class

@inject TStateManager _StateManager
@inject Router _Router

@code
{
    protected TStateManager StateManager = null!;
    protected Router Router = null!;

    protected sealed override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    protected sealed override async Task OnParametersSetAsync()
    {
        StateManager = _StateManager;
        Router = _Router;

        await (Task.Run(ServiceInjection), ServiceInjectionAsync());
        await (Task.Run(BuildRequiredClaims), BuildRequiredClaimsAsync());
        await (Task.Run(BeforeAuthentication), BeforeAuthenticationAsync()); 
        await (Task.Run(AuthenticationCheck), AuthenticationCheckAsync());
        
        (bool, bool) r = await (Task.Run(ClaimChallenge), ClaimChallengeAsync());

        if (!r.Item1 || !r.Item2)
        {
            await (Task.Run(ClaimChallengeFailed), ClaimChallengeFailedAsync());
            RoutingInfo routing = GetRedirectionRoute();

            Router.NavigateTo(routing.Path, routing.Reload);

            if (routing.StopPipeline)
                return;
        }

        await (Task.Run(AfterAuthentication), AfterAuthenticationAsync());
    }

    protected sealed override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await AfterFirstRenderAsync();
        else
            await AfterRenderAsync();
        
        await base.OnAfterRenderAsync(firstRender);
    }

    protected sealed override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            AfterFirstRender();
        else
            AfterRender();

        base.OnAfterRender(firstRender);
    }

    protected virtual void ServiceInjection() { }
    protected virtual Task ServiceInjectionAsync() => Task.CompletedTask;
    protected virtual void BuildRequiredClaims() { }
    protected virtual Task BuildRequiredClaimsAsync() => Task.CompletedTask;
    protected virtual void BeforeAuthentication() { }
    protected virtual Task BeforeAuthenticationAsync() => Task.CompletedTask;
    protected virtual void AuthenticationCheck() { }
    protected virtual Task AuthenticationCheckAsync() => Task.CompletedTask;
    protected virtual bool ClaimChallenge() => true;
    protected virtual Task<bool> ClaimChallengeAsync() => Task.FromResult(true);
    protected virtual void ClaimChallengeFailed() { }
    protected virtual Task ClaimChallengeFailedAsync() => Task.CompletedTask;
    protected virtual RoutingInfo GetRedirectionRoute() => new RoutingInfo();
    protected virtual void AfterAuthentication() { }
    protected virtual Task AfterAuthenticationAsync() => Task.CompletedTask;
    protected virtual void AfterFirstRender() { }
    protected virtual Task AfterFirstRenderAsync() => Task.CompletedTask;
    protected virtual void AfterRender() { }
    protected virtual Task AfterRenderAsync() => Task.CompletedTask;
}
