@typeparam TStateManager where TStateManager : class

@inject TStateManager _StateManager
@inject Router _Router

@code
{
    protected TStateManager StateManager = null!;
    protected List<string> RequiredClaims = new List<string>();
    protected Router Router = null!;

    protected sealed override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected sealed override async Task OnInitializedAsync()
    {
        StateManager = _StateManager;
        Router = _Router;

        await ServiceInjection();
        await BuildRequiredClaims();
        await BeforeAuthentication();
        await AuthenticationCheck();
        
        if (!await ClaimChallenge())
        {
            await ClaimChallengeFailed();
            RoutingInfo routing = await GetRedirectionRoute();

            Router.NavigateTo(routing.Path, routing.Reload);

            if (routing.StopPipeline)
                return;
        }

        await AfterAuthentication();
    }

    public virtual Task ServiceInjection() => Task.CompletedTask;
    public virtual Task BuildRequiredClaims() => Task.CompletedTask;
    public virtual Task BeforeAuthentication() => Task.CompletedTask;
    public virtual Task AuthenticationCheck() => Task.CompletedTask;
    public virtual Task<bool> ClaimChallenge() => Task.FromResult(true);
    public virtual Task ClaimChallengeFailed() => Task.CompletedTask;
    public virtual Task<RoutingInfo> GetRedirectionRoute() => Task.FromResult(new RoutingInfo());
    public virtual Task AfterAuthentication() => Task.CompletedTask;
}
